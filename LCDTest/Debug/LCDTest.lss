
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e87  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088c  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a2  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000077f  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8e:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <toggle_e+0x8>
  a2:	00 00       	nop
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret

000000ac <lcd_write>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	d8 2f       	mov	r29, r24
  b2:	66 23       	and	r22, r22
  b4:	21 f0       	breq	.+8      	; 0xbe <lcd_write+0x12>
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <lcd_write+0x18>
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	8f 60       	ori	r24, 0x0F	; 15
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	c5 b1       	in	r28, 0x05	; 5
  d2:	c0 7f       	andi	r28, 0xF0	; 240
  d4:	8d 2f       	mov	r24, r29
  d6:	82 95       	swap	r24
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8c 2b       	or	r24, r28
  dc:	85 b9       	out	0x05, r24	; 5
  de:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  e2:	df 70       	andi	r29, 0x0F	; 15
  e4:	dc 2b       	or	r29, r28
  e6:	d5 b9       	out	0x05, r29	; 5
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  ec:	cf 60       	ori	r28, 0x0F	; 15
  ee:	c5 b9       	out	0x05, r28	; 5
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_read>:
  f6:	88 23       	and	r24, r24
  f8:	21 f0       	breq	.+8      	; 0x102 <lcd_read+0xc>
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <lcd_read+0x12>
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	8b b9       	out	0x0b, r24	; 11
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	84 b9       	out	0x04, r24	; 4
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 61       	ori	r24, 0x10	; 16
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_read+0x26>
 120:	00 00       	nop
 122:	93 b1       	in	r25, 0x03	; 3
 124:	92 95       	swap	r25
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	8f 7e       	andi	r24, 0xEF	; 239
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_read+0x3a>
 134:	00 00       	nop
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_read+0x48>
 142:	00 00       	nop
 144:	83 b1       	in	r24, 0x03	; 3
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	2b b1       	in	r18, 0x0b	; 11
 14a:	2f 7e       	andi	r18, 0xEF	; 239
 14c:	2b b9       	out	0x0b, r18	; 11
 14e:	89 2b       	or	r24, r25
 150:	08 95       	ret

00000152 <lcd_waitbusy>:
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_read>
 158:	88 23       	and	r24, r24
 15a:	dc f3       	brlt	.-10     	; 0x152 <lcd_waitbusy>
 15c:	85 e1       	ldi	r24, 0x15	; 21
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_waitbusy+0xc>
 162:	00 00       	nop
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 56 00 	call	0xac	; 0xac <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_gotoxy>:
 180:	61 11       	cpse	r22, r1
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_gotoxy+0xc>
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 192:	08 95       	ret

00000194 <lcd_clrscr>:
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_putc>:
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
 1a0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_waitbusy>
 1a4:	ca 30       	cpi	r28, 0x0A	; 10
 1a6:	49 f4       	brne	.+18     	; 0x1ba <lcd_putc+0x1e>
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	10 f4       	brcc	.+4      	; 0x1b0 <lcd_putc+0x14>
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <lcd_putc+0x16>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	80 58       	subi	r24, 0x80	; 128
 1b4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <lcd_putc+0x26>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 56 00 	call	0xac	; 0xac <lcd_write>
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	8f 60       	ori	r24, 0x0F	; 15
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f4:	8a b1       	in	r24, 0x0a	; 10
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	99 ef       	ldi	r25, 0xF9	; 249
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x20>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x26>
 20a:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	85 b9       	out	0x05, r24	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 212:	85 b1       	in	r24, 0x05	; 5
 214:	81 60       	ori	r24, 0x01	; 1
 216:	85 b9       	out	0x05, r24	; 5
    lcd_e_toggle();
 218:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	9e e4       	ldi	r25, 0x4E	; 78
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x3c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_init+0x42>
 226:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 228:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x4c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x52>
 236:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 238:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x5c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_init+0x62>
 246:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	85 b9       	out	0x05, r24	; 5
    lcd_e_toggle();
 24e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x72>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init+0x78>
 25c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 26a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

}/* lcd_init */
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <main>:

#include "lcd.h"
#include "avr/io.h"
int main(void)
{
	lcd_init(LCD_DISP_ON);
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
	lcd_clrscr();
 284:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
	lcd_gotoxy(0,0);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	lcd_puts("asd1");
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x1a>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
